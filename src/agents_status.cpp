/*
  ____  _       _            _             _
 / ___|(_)_ __ | | __  _ __ | |_   _  __ _(_)_ __
 \___ \| | '_ \| |/ / | '_ \| | | | |/ _` | | '_ \
  ___) | | | | |   <  | |_) | | |_| | (_| | | | | |
 |____/|_|_| |_|_|\_\ | .__/|_|\__,_|\__, |_|_| |_|
                      |_|            |___/
# A Template for AgentsPlugin, a Sink Plugin
# Generated by the command: plugin -t sink -d . -s agents
# Hostname: MacBookPro.homenet.telecomitalia.it
# Current working directory: /Users/p4010/Develop/MADS_plugins/agents_plugin
# Creation date: 2025-09-15T18:12:29.763+0200
# NOTICE: MADS Version 1.3.5
*/

// Mandatory included headers
#include <map>
#include <nlohmann/json.hpp>
#include <pugg/Kernel.h>
#include <rang.hpp>
#include <sink.hpp>

// other includes as needed here

// Define the name of the plugin
#ifndef PLUGIN_NAME
#define PLUGIN_NAME "agents_status"
#endif

// Load the namespaces
using namespace std;
using namespace rang;
using json = nlohmann::json;

// Plugin class. This shall be the only part that needs to be modified,
// implementing the actual functionality
class AgentsStatusPlugin : public Sink<json> {

public:
  // Typically, no need to change this
  string kind() override { return PLUGIN_NAME; }

  // Implement the actual functionality here
  return_type load_data(json const &input, string topic = "") override {
    if (topic != "agent_event") {
      _error = "Unexpected topic";
      return return_type::error;
    }

    if (input["name"].is_null() || input["name"] == "agents_status") {
      return return_type::retry;
    }

    if (input["event"] != "startup" && input["event"] != "shutdown") {
      return return_type::retry;
    }

    string name = input["name"];
    if (input["agent_id"].is_string()) {
      name += "/" + input["agent_id"].get<string>();
    }

    string status = input["event"] == "startup" ? "ON" : "OFF";

    _agents[name] = json{{"status", status},
                         {"host", input["hostname"]},
                         {"time", input["timestamp"]["$date"]},
                         {"offset", input["timecode_offset"]}};

    for (int i = 0; i < _agents.size() + 1; i++) {
      // Move cursor up one line
      std::cout << "\x1b[1A";
      // Clear entire line
      std::cout << "\x1b[2K";
    }
    
    cout << style::italic << setw(7) << left << "Status" << setw(20) << left
         << "Agent" << setw(25) << left << "Host" << setw(30) << left
         << "Timestamp"
         << "Time offset" << style::reset << endl;

    for (auto &[k, v] : _agents) {
      string s = v["status"].get<string>();
      cout << style::bold;
      if (s == "ON") {
        cout << fg::green;
      } else {
        cout << fg::red;
      }
      cout << setw(7) << left << v["status"].get<string>() << style::reset
           << fg::cyan << setw(20) << left << k << fg::yellow << setw(25)
           << left << v["host"].get<string>() << fg::reset << setw(30) << left
           << v["time"].get<string>() << v["offset"].get<double>() << fg::reset
           << endl;
    }

    return return_type::success;
  }

  void set_params(void const *params) override {
    // Call the parent class method to set the common parameters
    // (e.g. agent_id, etc.)
    Sink::set_params(params);

    // then merge the defaults with the actually provided parameters
    // params needs to be cast to json
    _params.merge_patch(*(json *)params);
  }

  // Implement this method if you want to provide additional information
  map<string, string> info() override {
    // return a map of strings with additional information about the plugin
    // it is used to print the information about the plugin when it is loaded
    // by the agent

    return {};
  };

private:
  // Define the fields that are used to store internal resources
  map<string, json> _agents;
};

/*
  ____  _             _             _      _
 |  _ \| |_   _  __ _(_)_ __     __| |_ __(_)_   _____ _ __
 | |_) | | | | |/ _` | | '_ \   / _` | '__| \ \ / / _ \ '__|
 |  __/| | |_| | (_| | | | | | | (_| | |  | |\ V /  __/ |
 |_|   |_|\__,_|\__, |_|_| |_|  \__,_|_|  |_| \_/ \___|_|
                |___/
Enable the class as plugin
*/
INSTALL_SINK_DRIVER(AgentsStatusPlugin, json)

/*
                  _
  _ __ ___   __ _(_)_ __
 | '_ ` _ \ / _` | | '_ \
 | | | | | | (_| | | | | |
 |_| |_| |_|\__,_|_|_| |_|

For testing purposes, when directly executing the plugin
*/
int main(int argc, char const *argv[]) {
  AgentsStatusPlugin plugin;
  json input, params;

  // Set example values to params
  params["test"] = "value";

  // Set the parameters
  plugin.set_params(&params);

  // Process data
  plugin.load_data(input);

  return 0;
}
